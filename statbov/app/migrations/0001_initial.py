# Generated by Django 5.0.1 on 2024-02-12 10:39

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('obs', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Diet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.CharField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Employment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=20)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('gender', models.CharField(help_text='M - Masculino | F - Feminino', max_length=1)),
                ('birth_date', models.DateField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
        ),
        migrations.CreateModel(
            name='Animal',
            fields=[
                ('id', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('race', models.CharField(choices=[('NL', 'Nelore'), ('GR', 'Girolando'), ('GZ', 'Guzerá'), ('HL', 'Holandês'), ('SN', 'Senepol'), ('GL', 'Gir Leiteiro')], max_length=2)),
                ('gender', models.CharField(max_length=1)),
                ('entry_date', models.DateField(auto_now_add=True)),
                ('exit_date', models.DateField(blank=True, null=True)),
                ('reason_living', models.CharField(blank=True, choices=[('SL', 'Venda'), ('DT', 'Morte'), ('ST', 'Abate')], max_length=2, null=True)),
                ('father_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='father', to='app.animal')),
                ('mother_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mother', to='app.animal')),
                ('farm_origin_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.farm')),
            ],
        ),
        migrations.CreateModel(
            name='BatchLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_data_batch', models.DateField(auto_now_add=True)),
                ('exit_data_batch', models.DateField(blank=True, null=True)),
                ('animal_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.animal')),
                ('batch_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.batch')),
            ],
        ),
        migrations.AddField(
            model_name='batch',
            name='diet_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.diet'),
        ),
        migrations.CreateModel(
            name='DietLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('init_date', models.DateField(auto_now_add=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('batch_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.batch')),
                ('diet_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.diet')),
            ],
        ),
        migrations.CreateModel(
            name='EmploymentUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employment_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.employment')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='batch',
            name='farm_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.farm'),
        ),
        migrations.CreateModel(
            name='Farmer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpf', models.CharField(max_length=11, unique=True)),
                ('entry_date', models.DateField(auto_now_add=True)),
                ('farmer_plan', models.CharField(choices=[('FR', 'Grátis'), ('ST', 'Iniciante'), ('MD', 'Médio'), ('PR', 'Profissional')], max_length=2)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='farm',
            name='farmer_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.farmer'),
        ),
        migrations.CreateModel(
            name='FarmUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.farm')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('action', models.CharField(max_length=20)),
                ('description', models.CharField(blank=True, max_length=254, null=True)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Todo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=254, null=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('done', models.BooleanField(default=False)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('responsible', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='responsible', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(max_length=50)),
                ('number', models.SmallIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('cep', models.CharField(help_text='Only numbers', max_length=8, validators=[django.core.validators.MinLengthValidator(8)])),
                ('neighborhood', models.CharField(max_length=20)),
                ('city', models.CharField(max_length=20)),
                ('state', models.CharField(max_length=2, validators=[django.core.validators.MinLengthValidator(2)])),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPhone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(help_text='Only numbers', max_length=11, unique=True)),
                ('phone_type', models.CharField(choices=[('MB', 'Celular'), ('HM', 'Casa'), ('WK', 'Trabalho')], max_length=2)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WeightLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('weight', models.DecimalField(decimal_places=2, max_digits=5)),
                ('topic', models.CharField(choices=[('RT', 'Rotina'), ('WN', 'Desmame'), ('BR', 'Nascimento')], max_length=2)),
                ('animal_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.animal')),
            ],
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['username'], name='username_idx'),
        ),
        migrations.AddIndex(
            model_name='customuser',
            index=models.Index(fields=['email'], name='email_idx'),
        ),
        migrations.AddIndex(
            model_name='batchlog',
            index=models.Index(fields=['animal_id'], name='animal_id_batch_log_idx'),
        ),
        migrations.AddIndex(
            model_name='batchlog',
            index=models.Index(fields=['batch_id'], name='batch_id_batch_log_idx'),
        ),
        migrations.AddIndex(
            model_name='batchlog',
            index=models.Index(fields=['entry_data_batch'], name='entry_data_batch_idx'),
        ),
        migrations.AddIndex(
            model_name='batchlog',
            index=models.Index(fields=['exit_data_batch'], name='exit_data_batch_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='batchlog',
            unique_together={('animal_id', 'batch_id')},
        ),
        migrations.AddIndex(
            model_name='dietlog',
            index=models.Index(fields=['diet_id'], name='diet_id_diet_log_idx'),
        ),
        migrations.AddIndex(
            model_name='dietlog',
            index=models.Index(fields=['batch_id'], name='batch_id_diet_log_idx'),
        ),
        migrations.AddIndex(
            model_name='dietlog',
            index=models.Index(fields=['init_date'], name='init_date_idx'),
        ),
        migrations.AddIndex(
            model_name='dietlog',
            index=models.Index(fields=['end_date'], name='end_date_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='dietlog',
            unique_together={('diet_id', 'batch_id')},
        ),
        migrations.AddIndex(
            model_name='employmentuser',
            index=models.Index(fields=['user_id'], name='user_id_employment_user_idx'),
        ),
        migrations.AddIndex(
            model_name='employmentuser',
            index=models.Index(fields=['employment_id'], name='employment_id_idx'),
        ),
        migrations.AddIndex(
            model_name='batch',
            index=models.Index(fields=['farm_id'], name='farm_id_batch_idx'),
        ),
        migrations.AddIndex(
            model_name='batch',
            index=models.Index(fields=['diet_id'], name='diet_id_batch_idx'),
        ),
        migrations.AddIndex(
            model_name='animal',
            index=models.Index(fields=['farm_origin_id'], name='farm_origin_id_idx'),
        ),
        migrations.AddIndex(
            model_name='animal',
            index=models.Index(fields=['race'], name='race_idx'),
        ),
        migrations.AddIndex(
            model_name='animal',
            index=models.Index(fields=['mother_id'], name='mother_id_idx'),
        ),
        migrations.AddIndex(
            model_name='animal',
            index=models.Index(fields=['father_id'], name='father_id_idx'),
        ),
        migrations.AddIndex(
            model_name='animal',
            index=models.Index(fields=['gender'], name='gender_idx'),
        ),
        migrations.AddIndex(
            model_name='animal',
            index=models.Index(fields=['entry_date'], name='entry_date_idx'),
        ),
        migrations.AddIndex(
            model_name='animal',
            index=models.Index(fields=['exit_date'], name='exit_date_idx'),
        ),
        migrations.AddIndex(
            model_name='animal',
            index=models.Index(fields=['reason_living'], name='reason_living_idx'),
        ),
        migrations.AddIndex(
            model_name='farmer',
            index=models.Index(fields=['user_id'], name='user_id_farmer_idx'),
        ),
        migrations.AddIndex(
            model_name='farmer',
            index=models.Index(fields=['cpf'], name='cpf_idx'),
        ),
        migrations.AddIndex(
            model_name='farmer',
            index=models.Index(fields=['farmer_plan'], name='farmer_plan_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='farmer',
            unique_together={('user_id', 'cpf', 'farmer_plan')},
        ),
        migrations.AddIndex(
            model_name='farm',
            index=models.Index(fields=['farmer_id'], name='farmer_id_idx'),
        ),
        migrations.AddIndex(
            model_name='farmuser',
            index=models.Index(fields=['user_id'], name='user_id_farm_user_idx'),
        ),
        migrations.AddIndex(
            model_name='farmuser',
            index=models.Index(fields=['farm_id'], name='farm_id_farm_user_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='farmuser',
            unique_together={('user_id', 'farm_id')},
        ),
        migrations.AddIndex(
            model_name='log',
            index=models.Index(fields=['user_id'], name='user_id_log_idx'),
        ),
        migrations.AddIndex(
            model_name='log',
            index=models.Index(fields=['datetime'], name='datetime_log_idx'),
        ),
        migrations.AddIndex(
            model_name='todo',
            index=models.Index(fields=['done'], name='done_idx'),
        ),
        migrations.AddIndex(
            model_name='todo',
            index=models.Index(fields=['responsible'], name='responsible_idx'),
        ),
        migrations.AddIndex(
            model_name='todo',
            index=models.Index(fields=['creator'], name='creator_idx'),
        ),
        migrations.AddIndex(
            model_name='useraddress',
            index=models.Index(fields=['user_id'], name='user_id_user_address_idx'),
        ),
        migrations.AddIndex(
            model_name='useraddress',
            index=models.Index(fields=['city'], name='city_idx'),
        ),
        migrations.AddIndex(
            model_name='useraddress',
            index=models.Index(fields=['state'], name='state_idx'),
        ),
        migrations.AddIndex(
            model_name='userphone',
            index=models.Index(fields=['user_id'], name='user_id_user_phone_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userphone',
            unique_together={('phone', 'user_id')},
        ),
        migrations.AddIndex(
            model_name='weightlog',
            index=models.Index(fields=['animal_id'], name='animal_id_weight_log_idx'),
        ),
        migrations.AddIndex(
            model_name='weightlog',
            index=models.Index(fields=['date'], name='date_weight_log_idx'),
        ),
        migrations.AddIndex(
            model_name='weightlog',
            index=models.Index(fields=['topic'], name='topic_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='weightlog',
            unique_together={('animal_id', 'date')},
        ),
    ]
