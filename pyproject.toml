[tool.poetry]
name = "statbov"
version = "0.1.0"
description = "Uma plataforma para análise estatística de desempenho da produção de rebanhos bovinos."
authors = ["Henrique Sebastião <contato@henriquesebastiao.com>"]
readme = "README.md"
license = "MIT"

[tool.poetry.dependencies]
python = "^3.12.3"
django = "^5.0.6"
python-decouple = "^3.8"
psycopg2-binary = "^2.9.9"
fontawesomefree = "^6.5.1"
python-dotenv = "^1.0.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
pytest-cov = "^5.0.0"
taskipy = "^1.12.2"
blue = "^0.9.1"
ruff = "^0.5.0"
isort = "^5.13.2"
pytest-django = "^4.8.0"
selenium = "^4.21.0"
pydocstyle = "^6.3.0"
bandit = {extras = ["toml"], version = "^1.7.8"}
pip-audit = "^2.7.3"
radon = {extras = ["toml"], version = "^6.0.1"}
mypy = "^1.10.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 79
exclude = ['migrations', '__init__.py']

[tool.isort]
profile = "django"
line_length = 79
extend_skip = ['migrations']

[tool.blue]
extend-exclude = '(migrations/)'

[tool.coverage.run]
branch = true
omit = ["**/*test*.py", "manage.py", "**/migrations/*", "**/project/*.py"]

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
pythonpath = "."
DJANGO_SETTINGS_MODULE = "statbov.settings"
python_files = "test.py tests.py test_*.py tests_*.py *_test.py *_tests.py"
addopts = "--strict-markers -v"
norecursedirs = "dist build .* data venv"
markers = [
    "functional_test: Run tests that are selenium based",
    "not_in_sqlite: Run tests that are not in postgresql",
]

[tool.commitizen]
version_provider = "poetry"
update_changelog_on_bump = true
style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[[tool.mypy.overrides]]
module = [
    "django.*",
    "decouple.*",
]
ignore_missing_imports = true

[tool.taskipy.tasks]
lint = "task ruff && task blue && task isort && task pydocstyle"
format = "blue .  && isort ."
quality = "task radon && task mypy"
sec = "task bandit && task pip-audit"
ruff = "ruff ."
blue = "blue --check . --diff"
isort = "isort --check --diff ."
pydocstyle = "pydocstyle ./tests/utils --count --convention=google --add-ignore=D100,D104,D105,D106,D107"
radon = "radon cc ./statbov -a -na"
mypy = "mypy -p statbov -m manage -p tests"
bandit = "bandit -r ./statbov"
pip-audit = "pip-audit"
run = "python manage.py runserver"
ftest = "pytest -s -x --cov=statbov -vv"
pre_test = "task lint && task quality"
test = "pytest -s -x --cov=statbov -vv"
post_test = "coverage html"
functional-test = 'pytest -m "functional_test"'
pre-commit = "task test && task functional-test && task export-requirements"
export-requirements = "rm requirements.txt && poetry export -f requirements.txt --output requirements.txt --without-hashes --without dev"
makemigrations = "python manage.py makemigrations"
migrate = "python manage.py migrate"
update = "poetry update && task export-requirements"